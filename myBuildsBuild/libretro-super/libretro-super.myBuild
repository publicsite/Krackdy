#!/bin/sh
actualname="libretro-super"
version="master"
filename="${actualname}-${version}"
extension=".tar.gz"
sumUrl=""

#functions

do_get(){
	cd "${myBuildSourceDest}"
	git clone https://github.com/libretro/${actualname}

	cd libretro-super

	#we have to run libretro-upgrade first
	./libretro-upgrade.sh
	./libretro-fetch.sh

	return "$?"
}

do_extract(){
	cp -a "${myBuildSourceDest}/${actualname}" "${myBuildExtractDest}"

	return "$?"
}


do_build(){
#here you put commands like configure and make

	cd "${myBuildExtractDest}/${actualname}"

	./libretro-build.sh

return "$?"
}

do_install(){
#here you put the installation commands, like make install
	cd "${myBuildExtractDest}/${actualname}"

	mkdir -p "${SYSROOT}/home/kodi/bin"
	./libretro-install.sh ${SYSROOT}/home/kodi/bin/libretro

	cd "${SYSROOT}/home/kodi/bin"
	ln -sf /usr/bin/retroarch retroarch

	cd "${myBuildExtractDest}/${actualname}"
return "$?"
}

do_package(){
#here you package the files
cp -a "${myBuildsDir}/${actualname}/${actualname}.control" "${CONTDIR}/control"
printf "Architecture: %s\n" "$(printf "%s\n" "${TARGET}" | cut -d "-" -f 1-2)" >> "${CONTDIR}/control"

printf "2.0" > "${BUILDDIR}/debian-binary"

cd "${CONTDIR}"
tar --numeric-owner --group=0 --owner=0 -czf "${BUILDDIR}/control.tar.gz" ./*

cd "${SYSROOT}"
tar --numeric-owner --group=0 --owner=0 -czf "${BUILDDIR}/data.tar.gz" ./*

cd "${BUILDDIR}"
tar --numeric-owner --group=0 --owner=0 -czf "${PKGDIR}/${actualname}_${version}.$(printf "%s" "${TARGET}" | cut -d "-" -f 1-2).ipk" ./debian-binary ./control.tar.gz ./data.tar.gz

rm -rf "${CONTDIR}"
rm -rf "${SYSROOT}"
mkdir -p "${CONTDIR}"
mkdir -p "${SYSROOT}"
rm -f "${BUILDDIR}/debian-binary"
rm -f "${BUILDDIR}/control.tar.gz"
rm -f "${BUILDDIR}/data.tar.gz"

cd "${myBuildHome}"
return "$?"
}

if [ "$myBuildDoNotCallMainFunction" != "1" ]; then
#main code goes here
"${myBuildHelpersDir}"/argumentHelper.sh "$1" "$0" "$2" "$3"
fi