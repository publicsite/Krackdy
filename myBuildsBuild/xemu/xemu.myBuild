#!/bin/sh
actualname="xemu"
version="1.5.5"
filename="${actualname}-${version}"
extension=".tar.gz"
sumUrl=""

#functions

do_get(){
	cd "${myBuildSourceDest}"
	git clone --recurse-submodules https://github.com/xemu-project/xemu

	wget https://archive.org/download/xemustarter/XEMU%20FILES.zip -O XEMUFILES.zip
	wget "https://github.com/xemu-project/xemu-hdd-image/releases/latest/download/xbox_hdd.qcow2.zip" -O xbox_hdd.qcow2.zip


	return "$?"
}

do_extract(){
	cp -a "${myBuildSourceDest}/xemu" "${myBuildExtractDest}"

	cd "${myBuildExtractDest}"

	mkdir XEMUFILES
	cd XEMUFILES

	unzip "${myBuildSourceDest}/XEMUFILES.zip"
	rm -rf "XEMU FILES/Xbox Hard Disk Image/"*
	rm -rf "XEMU FILES/XEMU Application "
	rm -rf "XEMU FILES/XISO"

	cd "XEMU FILES/Xbox Hard Disk Image/"
	unzip "${myBuildSourceDest}/xbox_hdd.qcow2.zip"	

	return "$?"
}


do_build(){
#here you put commands like configure and make

cd "${myBuildExtractDest}/${actualname}"

patch -p1 < ${myBuildHome}/myBuildsBuild/xemu/atomic.h.patch

./build.sh

return "$?"
}

do_install(){
#here you put the installation commands, like make install
cd "${myBuildExtractDest}/${actualname}"

cp -a "${myBuildExtractDest}/${actualname}/dist/xemu" "${SYSROOT}/usr/bin/xemu"

cp -a "${myBuildExtractDest}/XEMUFILES" "${SYSROOT}/home/kodi/XEMUFILES"
return "$?"
}

do_package(){
#here you package the files
cp -a "${myBuildsDir}/${actualname}/${actualname}.control" "${CONTDIR}/control"
printf "Architecture: %s\n" "$(printf "%s\n" "${TARGET}" | cut -d "-" -f 1-2)" >> "${CONTDIR}/control"

printf "2.0" > "${BUILDDIR}/debian-binary"

cd "${CONTDIR}"
tar --numeric-owner --group=0 --owner=0 -czf "${BUILDDIR}/control.tar.gz" ./*

cd "${SYSROOT}"
tar --numeric-owner --group=0 --owner=0 -czf "${BUILDDIR}/data.tar.gz" ./*

cd "${BUILDDIR}"
tar --numeric-owner --group=0 --owner=0 -czf "${PKGDIR}/${actualname}_${version}.$(printf "%s" "${TARGET}" | cut -d "-" -f 1-2).ipk" ./debian-binary ./control.tar.gz ./data.tar.gz

rm -rf "${CONTDIR}"
rm -rf "${SYSROOT}"
mkdir -p "${CONTDIR}"
mkdir -p "${SYSROOT}"
rm -f "${BUILDDIR}/debian-binary"
rm -f "${BUILDDIR}/control.tar.gz"
rm -f "${BUILDDIR}/data.tar.gz"

cd "${myBuildHome}"
return "$?"
}

if [ "$myBuildDoNotCallMainFunction" != "1" ]; then
#main code goes here
"${myBuildHelpersDir}"/argumentHelper.sh "$1" "$0" "$2" "$3"
fi